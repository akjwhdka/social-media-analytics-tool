"use strict";
/**
 * Copyright 2020, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const files_1 = require("./files");
jest.mock('fs', () => ({
    ...jest.requireActual('fs'),
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call
    writeFile: jest.fn((file, data, options, callback) => callback()),
    mkdirSync: jest.fn(),
}));
const content = 'module.exports = "Hello world"';
const formattedContent = `module.exports = 'Hello world';
`;
const basePackageJson = {
    name: 'name',
    readme: 'README.md',
    version: '0.0.0',
    _id: 'id',
};
describe('files', () => {
    describe('writeFile', () => {
        it('should create the target folder if it does not exist', async () => {
            const configDir = './config';
            const filename = '.eslintrc.js';
            const shouldOverwrite = false;
            await (0, files_1.writeFile)(configDir, filename, content, shouldOverwrite);
            expect(fs_1.default.mkdirSync).toHaveBeenCalledWith('config', { recursive: true });
        });
        it('should write the file to disk', async () => {
            const configDir = './config';
            const filename = '.eslintrc.js';
            const shouldOverwrite = false;
            await (0, files_1.writeFile)(configDir, filename, content, shouldOverwrite);
            expect(fs_1.default.writeFile).toHaveBeenCalledWith('config/.eslintrc.js', expect.any(String), { flag: 'wx' }, expect.any(Function));
        });
        it('should overwrite the file if it already exists', async () => {
            const configDir = '.';
            const filename = '.eslintrc.js';
            const shouldOverwrite = true;
            await (0, files_1.writeFile)(configDir, filename, content, shouldOverwrite);
            expect(fs_1.default.writeFile).toHaveBeenCalledWith('.eslintrc.js', expect.any(String), { flag: 'w' }, expect.any(Function));
        });
        it('should format the file contents', async () => {
            const configDir = '.';
            const filename = '.eslintrc.js';
            const shouldOverwrite = true;
            await (0, files_1.writeFile)(configDir, filename, content, shouldOverwrite);
            expect(fs_1.default.writeFile).toHaveBeenCalledWith(expect.any(String), formattedContent, expect.any(Object), expect.any(Function));
        });
    });
    describe('addPackageScript', () => {
        it('should add a script to the package.json file', () => {
            const packageJson = { scripts: {} };
            const name = 'lint';
            const command = 'foundry run eslint src';
            const shouldOverwrite = false;
            const actual = (0, files_1.addPackageScript)(packageJson, name, command, shouldOverwrite);
            const expected = {
                scripts: { lint: 'foundry run eslint src' },
            };
            expect(actual).toEqual(expected);
        });
        it('should initialize the scripts if they do not exist yet', () => {
            const packageJson = {};
            const name = 'lint';
            const command = 'foundry run eslint src';
            const shouldOverwrite = false;
            const actual = (0, files_1.addPackageScript)(packageJson, name, command, shouldOverwrite);
            const expected = {
                scripts: { lint: 'foundry run eslint src' },
            };
            expect(actual).toEqual(expected);
        });
        it('should throw an error if a conflicting script exists', () => {
            const packageJson = {
                scripts: { lint: 'eslint .' },
            };
            const name = 'lint';
            const command = 'foundry run eslint src';
            const shouldOverwrite = false;
            const actual = () => (0, files_1.addPackageScript)(packageJson, name, command, shouldOverwrite);
            expect(actual).toThrow();
        });
        it('should overwrite the conflicting script', () => {
            const packageJson = {
                scripts: { lint: 'eslint .' },
            };
            const name = 'lint';
            const command = 'foundry run eslint src';
            const shouldOverwrite = true;
            const actual = (0, files_1.addPackageScript)(packageJson, name, command, shouldOverwrite);
            const expected = {
                scripts: { lint: 'foundry run eslint src' },
            };
            expect(actual).toEqual(expected);
        });
    });
    describe('savePackageJson', () => {
        it('should save the package.json file to disk', async () => {
            const path = 'package.json';
            await (0, files_1.savePackageJson)(path, basePackageJson);
            expect(fs_1.default.writeFile).toHaveBeenCalled();
        });
    });
});
