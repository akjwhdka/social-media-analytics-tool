"use strict";
/**
 * Copyright 2022, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectOpenSource = exports.detectFrameworks = exports.detectEnvironments = exports.detectLanguage = exports.hasDependency = exports.pickConfigOrDetect = exports.getOptions = exports.BROWSER_LIBRARIES = exports.NODE_LIBRARIES = void 0;
const shared_1 = require("../types/shared");
const files_1 = require("./files");
// These lists are not exhaustive and should be expanded if necessary.
exports.NODE_LIBRARIES = [
    'next',
    '@sveltejs/kit',
    'nuxt',
    'express',
    'koa',
];
exports.BROWSER_LIBRARIES = ['next', 'react', 'preact', 'svelte', 'vue'];
function getOptions() {
    const packageJson = (0, files_1.readPackageJson)();
    const config = (packageJson.foundry || {});
    const pick = pickConfigOrDetect(packageJson);
    return {
        language: pick(config.language, detectLanguage),
        environments: pick(config.environments, detectEnvironments),
        frameworks: pick(config.frameworks, detectFrameworks),
        openSource: pick(config.openSource, detectOpenSource),
        publish: Boolean(config.publish),
    };
}
exports.getOptions = getOptions;
function pickConfigOrDetect(packageJson) {
    return (explicit, detectFn) => (explicit !== undefined ? explicit : detectFn(packageJson));
}
exports.pickConfigOrDetect = pickConfigOrDetect;
function hasDependency(packageJson, name) {
    const { dependencies = {}, devDependencies = {} } = packageJson;
    return Boolean(dependencies[name] || devDependencies[name]);
}
exports.hasDependency = hasDependency;
function detectLanguage(packageJson) {
    return hasDependency(packageJson, 'typescript')
        ? shared_1.Language.TYPESCRIPT
        : shared_1.Language.JAVASCRIPT;
}
exports.detectLanguage = detectLanguage;
function detectEnvironments(packageJson) {
    const hasServerLibraries = exports.NODE_LIBRARIES.some((library) => hasDependency(packageJson, library));
    const hasClientLibraries = exports.BROWSER_LIBRARIES.some((library) => hasDependency(packageJson, library));
    const isCLI = Boolean(packageJson.bin);
    const isBrowser = Boolean(packageJson.browser);
    const environments = [];
    if (hasServerLibraries || isCLI) {
        environments.push(shared_1.Environment.NODE);
    }
    if (hasClientLibraries || isBrowser) {
        environments.push(shared_1.Environment.BROWSER);
    }
    return environments;
}
exports.detectEnvironments = detectEnvironments;
function detectFrameworks(packageJson) {
    const frameworks = [];
    if (hasDependency(packageJson, 'next')) {
        frameworks.push(shared_1.Framework.NEXT_JS);
    }
    if (!hasDependency(packageJson, 'next') &&
        hasDependency(packageJson, 'react')) {
        frameworks.push(shared_1.Framework.REACT);
    }
    if (hasDependency(packageJson, '@emotion/react')) {
        frameworks.push(shared_1.Framework.EMOTION);
    }
    if (hasDependency(packageJson, 'jest')) {
        frameworks.push(shared_1.Framework.JEST);
    }
    if (hasDependency(packageJson, '@testing-library/react')) {
        frameworks.push(shared_1.Framework.TESTING_LIBRARY);
    }
    if (hasDependency(packageJson, 'cypress')) {
        frameworks.push(shared_1.Framework.CYPRESS);
    }
    if (hasDependency(packageJson, 'playwright')) {
        frameworks.push(shared_1.Framework.PLAYWRIGHT);
    }
    return frameworks;
}
exports.detectFrameworks = detectFrameworks;
function detectOpenSource(packageJson) {
    return packageJson.license === 'Apache-2.0';
}
exports.detectOpenSource = detectOpenSource;
