#!/usr/bin/env node
"use strict";
/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const run_1 = require("./run");
const init_1 = require("./init");
const defaults_1 = require("./defaults");
// eslint-disable-next-line no-void
void yargs_1.default
    .command('init', "Initialize Foundry's tools in your project", {
    openSource: {
        alias: 'o',
        desc: 'Whether the project is open-source',
        type: 'boolean',
    },
    publish: {
        desc: 'Whether to publish to NPM',
        type: 'boolean',
    },
    configDir: {
        alias: 'c',
        desc: 'The directory to write configs to',
        type: 'string',
        default: defaults_1.DEFAULT_OPTIONS.configDir,
    },
    overwrite: {
        desc: 'Whether to overwrite existing config files',
        type: 'boolean',
        default: defaults_1.DEFAULT_OPTIONS.overwrite,
    },
}, execute('init'))
    .command('run <tool> [...tool options]', 'Run any of the bundled tools.', execute('run'))
    .showHelpOnFail(true)
    .demandCommand(1, '')
    .help()
    .version().argv;
function execute(command) {
    const commands = { run: run_1.run, init: init_1.init };
    const commandFn = commands[command];
    return (args) => {
        // eslint-disable-next-line no-console
        commandFn(args).catch(console.error);
    };
}
