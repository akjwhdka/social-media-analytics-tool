"use strict";
/**
 * Copyright 2020, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("../../types/shared");
const choices_1 = require("../../lib/choices");
const options_1 = require("../../lib/options");
const config_1 = require("./config");
jest.mock('../../lib/options', () => ({
    getOptions: jest.fn(() => ({})),
}));
const getOptions = options_1.getOptions;
describe('lint-staged', () => {
    describe('with options', () => {
        const matrix = (0, choices_1.getAllChoiceCombinations)({ language: shared_1.Language });
        it.each(matrix)('should return a config for %o', (options) => {
            getOptions.mockReturnValue(options);
            const actual = (0, config_1.config)();
            expect(actual).toMatchSnapshot();
        });
    });
    it('should override the default config', () => {
        const overrides = {
            '*.(js|jsx|json)': ['next lint'],
            '*.jsx?': ['custom command'],
        };
        const actual = (0, config_1.config)(overrides);
        expect(actual).toMatchSnapshot();
    });
});
