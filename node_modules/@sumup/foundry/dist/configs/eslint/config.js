"use strict";
/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.customizeConfig = void 0;
const process_1 = __importDefault(require("process"));
const fp_1 = require("lodash/fp");
const shared_1 = require("../../types/shared");
const logger = __importStar(require("../../lib/logger"));
const options_1 = require("../../lib/options");
exports.customizeConfig = (0, fp_1.mergeWith)(customizer);
function isArrayTypeGuard(array) {
    return (0, fp_1.isArray)(array);
}
function customizer(objValue, srcValue, key) {
    if (isArrayTypeGuard(objValue) && isArrayTypeGuard(srcValue)) {
        return (0, fp_1.uniq)([...objValue, ...srcValue]);
    }
    if ((0, fp_1.isObject)(objValue) && (0, fp_1.isObject)(srcValue)) {
        return key === 'rules' ? { ...objValue, ...srcValue } : undefined;
    }
    return undefined;
}
const UNIT_TEST_FILES = [
    '**/*.spec.*',
    '**/jest*',
    '**/setupTests.*',
    '**/test-utils.*',
    '**/*Fixtures.*',
    '**/__fixtures__/**/*',
    '**/__mocks__/**/*',
];
const NODE_FILES = ['api/**/*', 'pages/api/**/*', 'src/pages/api/**/*'];
const sharedRules = {
    'curly': ['error', 'all'],
    'no-use-before-define': 'off',
    'no-confusing-arrow': 'off',
    'max-len': [
        'error',
        {
            code: 80,
            tabWidth: 2,
            ignoreComments: true,
            ignoreUrls: true,
            ignoreStrings: true,
            ignoreTemplateLiterals: true,
            ignoreRegExpLiterals: true,
            ignorePattern: '^(?:import\\s|export\\s|\\s*it(?:\\.(?:skip|only))?\\()',
        },
    ],
    'no-underscore-dangle': 'error',
    'import/prefer-default-export': 'off',
    'import/no-cycle': ['error', { maxDepth: 7 }],
    'import/order': ['error', { 'newlines-between': 'always' }],
    'import/extensions': 'off',
    // The rules below are already covered by prettier.
    'quote-props': 'off',
    'comma-dangle': 'off',
    'object-curly-newline': 'off',
    'implicit-arrow-linebreak': 'off',
    'function-paren-newline': 'off',
    'operator-linebreak': 'off',
    'indent': 'off',
    'no-void': ['error', { allowAsStatement: true }],
};
const sharedOverrides = [
    {
        files: ['**/*.{story,stories}.*'],
        rules: {
            'import/no-extraneous-dependencies': 'off',
            'import/no-anonymous-default-export': 'off',
            'no-alert': 'off',
        },
    },
    {
        files: ['**/*spec.*', '**/jest*', '**/setupTests.*', '**/test-utils.*'],
        rules: {
            'import/no-extraneous-dependencies': 'off',
            'react/display-name': 'off',
            'react/prop-types': 'off',
        },
    },
];
const base = {
    root: true,
    extends: ['eslint:recommended', 'plugin:prettier/recommended', 'airbnb-base'],
    plugins: ['prettier'],
    parser: '@babel/eslint-parser',
    parserOptions: {
        sourceType: 'module',
        ecmaVersion: 6,
        ecmaFeatures: {
            modules: true,
            impliedStrict: true,
        },
        allowImportExportEverywhere: true,
    },
    settings: {
        'import/resolver': {
            node: {
                extensions: ['.js', '.jsx', '.ts', '.tsx'],
            },
        },
    },
    rules: sharedRules,
    overrides: [
        {
            files: ['**/*.json'],
            extends: ['plugin:json/recommended'],
            rules: {
                'notice/notice': 'off',
            },
        },
        {
            files: NODE_FILES,
            rules: {
                'no-console': 'off',
            },
        },
    ],
};
function customizeLanguage(language) {
    const languageMap = {
        [shared_1.Language.JAVASCRIPT]: {
            overrides: sharedOverrides,
        },
        [shared_1.Language.TYPESCRIPT]: {
            overrides: [
                {
                    files: ['**/*.{ts,tsx}'],
                    extends: [
                        'airbnb-typescript/base',
                        'plugin:@typescript-eslint/eslint-recommended',
                        'plugin:@typescript-eslint/recommended',
                        'plugin:@typescript-eslint/recommended-requiring-type-checking',
                    ],
                    plugins: ['@typescript-eslint'],
                    parser: '@typescript-eslint/parser',
                    parserOptions: {
                        tsconfigRootDir: process_1.default.cwd(),
                        project: ['./tsconfig.json'],
                        extraFileExtensions: ['.json'],
                        sourceType: 'module',
                        ecmaVersion: 6,
                        ecmaFeatures: {
                            modules: true,
                        },
                    },
                    rules: {
                        ...sharedRules,
                        '@typescript-eslint/explicit-function-return-type': 'off',
                        '@typescript-eslint/indent': 'off',
                        '@typescript-eslint/no-unused-vars': 'error',
                        '@typescript-eslint/no-misused-promises': [
                            'error',
                            { checksVoidReturn: false },
                        ],
                        '@typescript-eslint/no-use-before-define': [
                            'error',
                            { functions: false },
                        ],
                        'react/prop-types': 'off',
                    },
                },
                {
                    files: ['**/*.d.ts'],
                    rules: {
                        'spaced-comment': 'off',
                        'node/no-extraneous-import': 'off',
                        'import/no-extraneous-dependencies': [
                            'error',
                            { devDependencies: true },
                        ],
                    },
                },
                {
                    files: ['**/*.{story,stories}.{ts,tsx}'],
                    rules: {
                        '@typescript-eslint/explicit-module-boundary-types': 'off',
                    },
                },
                {
                    files: [
                        '**/*spec.{ts,tsx}',
                        '**/setupTests.{ts,tsx}',
                        '**/test-utils.{ts,tsx}',
                    ],
                    rules: {
                        '@typescript-eslint/no-explicit-any': 'off',
                        '@typescript-eslint/no-empty-function': 'off',
                        '@typescript-eslint/no-var-requires': 'off',
                        '@typescript-eslint/no-unsafe-assignment': 'off',
                        '@typescript-eslint/unbound-method': 'off',
                    },
                },
                ...sharedOverrides,
            ],
        },
    };
    return (config) => {
        if (!language) {
            return config;
        }
        const overrides = languageMap[language];
        return (0, exports.customizeConfig)(config, overrides);
    };
}
function customizeEnvironments(environments) {
    const environmentMap = {
        [shared_1.Environment.BROWSER]: {
            extends: ['plugin:compat/recommended'],
            env: { browser: true },
            settings: {
                lintAllEsApis: true,
                // This API produces a false positive
                polyfills: ['document.body'],
            },
            overrides: [
                {
                    files: [...UNIT_TEST_FILES, ...NODE_FILES],
                    rules: {
                        'compat/compat': 'off',
                    },
                },
            ],
        },
        [shared_1.Environment.NODE]: {
            extends: ['plugin:node/recommended'],
            env: { node: true },
            rules: {
                // We don't know if the user's source code is using EJS or CJS.
                'node/no-unsupported-features/es-syntax': 'off',
                // This rule breaks when used in combination with TypeScript
                // and is already covered by similar ESLint rules.
                'node/no-missing-import': 'off',
                // This rule is already covered by similar ESLint rules.
                'node/no-extraneous-import': 'off',
            },
            overrides: [
                {
                    files: [
                        '**/*.spec.*',
                        '**/jest*',
                        '**/setupTests.*',
                        '**/test-utils.*',
                    ],
                    rules: {
                        'node/no-unpublished-import': 'off',
                        'node/no-unpublished-require': 'off',
                        'node/no-missing-require': 'off',
                        'node/no-extraneous-require': 'off',
                    },
                },
            ],
        },
    };
    return (config) => {
        if (!environments || (0, fp_1.isEmpty)(environments)) {
            return config;
        }
        return environments.reduce((acc, environment) => {
            const overrides = environmentMap[environment];
            return (0, exports.customizeConfig)(acc, overrides);
        }, config);
    };
}
function customizeFramework(frameworks) {
    const frameworkMap = {
        [shared_1.Framework.REACT]: {
            extends: [
                'plugin:react/recommended',
                'plugin:react-hooks/recommended',
                'plugin:jsx-a11y/recommended',
            ],
            plugins: ['react', 'react-hooks', 'jsx-a11y'],
            rules: {
                // The automatic JSX runtime handles the React import.
                'react/react-in-jsx-scope': 'off',
                'react/display-name': 'off',
            },
            parserOptions: { ecmaFeatures: { jsx: true } },
            settings: { react: { version: 'detect' } },
        },
        [shared_1.Framework.NEXT_JS]: {
            extends: ['next'],
            settings: {
                // This is needed for eslint-plugin-compat: https://www.npmjs.com/package/eslint-plugin-compat#adding-polyfills
                // The list is based on https://github.com/vercel/next.js/blob/canary/packages/next-polyfill-nomodule/src/index.js
                polyfills: [
                    'Array.prototype.copyWithin',
                    'Array.prototype.fill',
                    'Array.prototype.find',
                    'Array.prototype.findIndex',
                    'Array.prototype.flagMap',
                    'Array.prototype.flat',
                    'Array.from',
                    'Array.prototype.includes',
                    'Array.of',
                    'Function.name',
                    'Map',
                    'Number.EPSILON',
                    'Number.isFinite',
                    'Number.isInteger',
                    'Number.isNaN',
                    'Number.isSafeInteger',
                    'Number.MAX_SAFE_INTEGER',
                    'Number.MIN_SAFE_INTEGER',
                    'Number.parseFloat',
                    'Number.parseInt',
                    'Object.assign',
                    'Object.entries',
                    'Object.getOwnPropertyDescriptors',
                    'Object.keys',
                    'Object.is',
                    'Object.values',
                    'Reflect',
                    'RegExp',
                    'Set',
                    'Symbol',
                    'String.prototype.codePointAt',
                    'String.prototype.endsWith',
                    'String.prototype.fromCodePoint',
                    'String.prototype.includes',
                    'String.prototype.padStart',
                    'String.prototype.padEnd',
                    'String.prototype.raw',
                    'String.prototype.repeat',
                    'String.prototype.startsWith',
                    'String.prototype.trimLeft',
                    'String.prototype.trimRight',
                    'URL',
                    'URLSearchParams',
                    'WeakMap',
                    'WeakSet',
                    'Promise',
                    'fetch',
                ],
            },
        },
        [shared_1.Framework.EMOTION]: {
            plugins: ['@emotion'],
            rules: {
                '@emotion/import-from-emotion': 'error',
                '@emotion/jsx-import': 'off',
                '@emotion/no-vanilla': 'error',
                '@emotion/pkg-renaming': 'error',
                '@emotion/styled-import': 'error',
                'react/no-unknown-property': ['error', { ignore: ['css'] }],
            },
        },
        [shared_1.Framework.JEST]: {
            overrides: [
                {
                    files: UNIT_TEST_FILES,
                    extends: ['plugin:jest/recommended'],
                    plugins: ['jest'],
                    env: { 'jest/globals': true },
                },
            ],
        },
        [shared_1.Framework.TESTING_LIBRARY]: {
            overrides: [
                {
                    files: UNIT_TEST_FILES,
                    extends: ['plugin:testing-library/react'],
                    plugins: ['testing-library'],
                },
            ],
        },
        [shared_1.Framework.CYPRESS]: {
            overrides: [
                {
                    files: ['**/*spec.*', 'e2e/**/*', 'tests/**/*'],
                    extends: ['plugin:cypress/recommended'],
                    plugins: ['cypress'],
                    env: { 'cypress/globals': true },
                },
            ],
        },
        [shared_1.Framework.PLAYWRIGHT]: {
            overrides: [
                {
                    files: ['**/*spec.*', 'e2e/**/*', 'tests/**/*'],
                    extends: ['plugin:playwright/playwright-test'],
                },
            ],
        },
    };
    return (config) => {
        if (!frameworks || (0, fp_1.isEmpty)(frameworks)) {
            return config;
        }
        if (frameworks.includes(shared_1.Framework.NEXT_JS) &&
            frameworks.includes(shared_1.Framework.REACT)) {
            logger.warn(`The '${shared_1.Framework.NEXT_JS}' framework includes React-specific rules. Please remove the '${shared_1.Framework.REACT}' framework to avoid conflicts.`);
            // eslint-disable-next-line no-param-reassign
            frameworks = frameworks.filter((framework) => framework !== shared_1.Framework.REACT);
        }
        return frameworks.reduce((acc, framework) => {
            const overrides = frameworkMap[framework];
            return (0, exports.customizeConfig)(acc, overrides);
        }, config);
    };
}
function addCopyrightNotice(openSource) {
    return (config) => {
        if (!openSource) {
            return config;
        }
        const copyrightNotice = {
            plugins: ['notice'],
            rules: {
                'notice/notice': [
                    'error',
                    {
                        template: `/**
 * Copyright <%= YEAR %>, <%= NAME %>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

`,
                        templateVars: { NAME: 'SumUp Ltd.' },
                        varRegexps: { NAME: /SumUp Ltd\./ },
                        onNonMatchingHeader: 'prepend',
                    },
                ],
            },
        };
        return (0, exports.customizeConfig)(config, copyrightNotice);
    };
}
function applyOverrides(overrides) {
    return (config) => (0, exports.customizeConfig)(config, overrides);
}
function createConfig(overrides = {}) {
    const options = (0, options_1.getOptions)();
    return (0, fp_1.flow)(customizeLanguage(options.language), customizeEnvironments(options.environments), customizeFramework(options.frameworks), addCopyrightNotice(options.openSource), applyOverrides(overrides))(base);
}
exports.createConfig = createConfig;
